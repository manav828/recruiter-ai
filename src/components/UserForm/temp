import { useState } from "react"
import { ChevronRight } from "lucide-react"
import "./UserFormStyle/MyInformation.css"
import { CalendarIcon, PlusIcon, Trash2Icon } from "lucide-react"
import "./UserFormStyle/step3.css";

export default function Experience() {
    const [currentlyWorking, setCurrentlyWorking] = useState(false);
    const [formData, setFormData] = useState({
        fullName: "Harsh Shah",
        jobTitle: "Senior Product Designer",
        phoneNumber: "07728733323",
        linkedinUrl: "www.linkedin.in",
        addressLine1: "San Francisco",
        city: "San Francisco",
        postalCode: "San Francisco",
        state: "San Francisco",
        phoneDeviceType: "",
        countryCode: "IN",
        phoneNumberWithCode: "",
        experienceLevel: "Entry",
        minimumSalary: "$40,000",
        jobType: "Full Time",
    });

    const [experiences, setExperiences] = useState([
        {
            jobTitle: "Harsh Shah",
            company: "Senior Product Designer",
            location: "07128733323",
            fromDate: "05/2023",
            toDate: "03/2024",
            roleDescription: "Drove increased adoption of",
            currentlyWorking: false,
        },
    ]);

    const handleInputChange = (e, index) => {
        const { name, value } = e.target;
        const updatedExperiences = experiences.map((exp, i) =>
            i === index ? { ...exp, [name]: value } : exp
        );
        setExperiences(updatedExperiences);
    };

    const handleCurrentlyWorkingChange = (index, checked) => {
        const updatedExperiences = experiences.map((exp, i) =>
            i === index ? { ...exp, currentlyWorking: checked } : exp
        );
        setExperiences(updatedExperiences);
    };

    const addExperience = () => {
        setExperiences([
            ...experiences,
            {
                jobTitle: "",
                company: "",
                location: "",
                fromDate: "",
                toDate: "",
                roleDescription: "",
                currentlyWorking: false,
            },
        ]);
    };

    const deleteExperience = (index) => {
        setExperiences(experiences.filter((_, i) => i !== index));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        console.log("Form submitted:", experiences);
        // Handle form submission logic here
    };

    return (
        <div className="max-w-4xl mx-auto">
            <div className="mb-8">
                <h1 className="text-2xl font-bold text-gray-900 mb-2">Enter your Experience</h1>
                <p className="text-gray-600">
                    Tell us about your experience, skill, and education-so we can match you with the best opportunities!
                </p>
            </div>

            <form onSubmit={handleSubmit} id="myinfo" className="border-t border-gray-200 pt-8">
                {/* Profile Section */}
                <div className="mb-8">
                    <div className="flex flex-col md:flex-row md:items-start mb-6" id="profile">
                        <h2 className="w-full md:w-1/4 text-lg font-semibold text-gray-800 mb-4 md:mb-0">Work Experience</h2>
                        <div className="w-full md:w-3/4 space-y-4">
                            {experiences.map((exp, index) => (
                                <div key={index}>
                                    <div className="flex justify-between items-center mb-6">
                                        <h2 className="text-xl font-semibold">Work Experience </h2>
                                        <button
                                            className="text-red-500 flex items-center gap-1"
                                            onClick={() => deleteExperience(index)}
                                        >
                                            <Trash2Icon className="h-4 w-4" />
                                            <span>Delete</span>
                                        </button>
                                    </div>
                                    <div>
                                        <label htmlFor={`jobTitle-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                                            Job Title
                                        </label>
                                        <input
                                            type="text"
                                            id={`jobTitle-${index}`}
                                            name="jobTitle"
                                            className="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            value={exp.jobTitle}
                                            onChange={(e) => handleInputChange(e, index)}
                                        />
                                    </div>

                                    <div>
                                        <label htmlFor={`company-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                                            Company
                                        </label>
                                        <input
                                            type="text"
                                            id={`company-${index}`}
                                            name="company"
                                            className="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            value={exp.company}
                                            onChange={(e) => handleInputChange(e, index)}
                                        />
                                    </div>

                                    <div>
                                        <label htmlFor={`location-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                                            Location
                                        </label>
                                        <input
                                            type="text"
                                            id={`location-${index}`}
                                            name="location"
                                            className="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            value={exp.location}
                                            onChange={(e) => handleInputChange(e, index)}
                                        />
                                    </div>

                                    <div className="flex items-center items-end gap-4">
                                        <div className="flex flex-col item-center">
                                            <label htmlFor={`fromDate-${index}`} className="text-sm font-medium text-gray-700 mb-1">
                                                From
                                            </label>
                                            <div className="relative">
                                                <input
                                                    type="text"
                                                    id={`fromDate-${index}`}
                                                    name="fromDate"
                                                    className="w-40 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 pr-10 calendarInput"
                                                    value={exp.fromDate}
                                                    onChange={(e) => handleInputChange(e, index)}
                                                />
                                                <CalendarIcon className="absolute right-3 top-2.5 h-5 w-5 text-gray-400" />
                                            </div>
                                        </div>

                                        <div className="flex flex-col">
                                            <label htmlFor={`toDate-${index}`} className="text-sm font-medium text-gray-700 mb-1">
                                                To
                                            </label>
                                            <div className="relative">
                                                <input
                                                    type="text"
                                                    id={`toDate-${index}`}
                                                    name="toDate"
                                                    className="w-40 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 pr-10 calendarInput"
                                                    value={exp.toDate}
                                                    disabled={exp.currentlyWorking}
                                                    onChange={(e) => handleInputChange(e, index)}
                                                />
                                                <CalendarIcon className="absolute right-3 top-2.5 h-5 w-5 text-gray-400" />
                                            </div>
                                        </div>

                                        <div className="flex flex-col">
                                            <label className="text-sm font-medium text-gray-700 mb-1 invisible">
                                                Placeholder
                                            </label>
                                            <div className="flex items-center gap-2">
                                                <input
                                                    type="checkbox"
                                                    id={`currentlyWorking-${index}`}
                                                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                                    checked={exp.currentlyWorking}
                                                    onChange={(e) => handleCurrentlyWorkingChange(index, e.target.checked)}
                                                />
                                                <label htmlFor={`currentlyWorking-${index}`} className="text-sm text-gray-700">
                                                    I currently work here
                                                </label>
                                            </div>
                                        </div>
                                    </div>

                                    <div>
                                        <label htmlFor={`roleDescription-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                                            Role Description
                                        </label>
                                        <textarea
                                            id={`roleDescription-${index}`}
                                            name="roleDescription"
                                            rows={6}
                                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            value={exp.roleDescription}
                                            onChange={(e) => handleInputChange(e, index)}
                                        />
                                    </div>
                                </div>
                            ))}

                            <div className="flex justify-center mt-6">
                                <button
                                    className="flex items-center gap-2 text-blue-600 border border-blue-600 rounded-full px-4 py-2 hover:bg-blue-50 transition-colors"
                                    onClick={addExperience}
                                >
                                    <PlusIcon className="h-4 w-4" />
                                    <span>Add Another</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Form Actions */}
                <div className="flex justify-end space-x-4 border-t border-gray-200 pt-6">
                    <button
                        type="button"
                        className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    >
                        Back
                    </button>
                    <button
                        type="submit"
                        className="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 flex items-center"
                    >
                        Save and Continue
                        <ChevronRight className="ml-2 h-4 w-4" />
                    </button>
                </div>
            </form>
        </div>
    );
}